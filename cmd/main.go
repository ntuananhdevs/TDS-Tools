package main

import (
	"encoding/json"
	"fmt"
	"os"
	"tds/config"
	"tds/internal/traodoisub"
	"tds/internal/facebook"
	"tds/models"
	"tds/utils"
	"strings"
	// "time"
	// "math/rand"
)

func main() {
	// L·∫•y token TDS t·ª´ c·∫•u h√¨nh (ƒë·ªçc t·ª´ file)
	utils.Info("üöÄ ƒêang kh·ªüi ƒë·ªông...")

	// ƒê·ªçc cookie t·ª´ file (l·∫•y c√°c t√†i kho·∫£n Facebook)
	cookies := loadCookies("../assets/Cookie_FB.txt")
	utils.Info("üöÄ B·∫Øt ƒë·∫ßu ch·∫°y...")

	// Kh·ªüi t·∫°o TDSClient
	tds := traodoisub.NewClient(config.AccessTokenTDS)

	// L·∫•y t·∫•t c·∫£ nhi·ªám v·ª• t·ª´ Traodoisub
	jobs, err := tds.GetAllJobs()
	if err != nil {
		utils.Error("Kh√¥ng th·ªÉ l·∫•y nhi·ªám v·ª•: " + err.Error())
		os.Exit(1)
	}

	// Hi·ªÉn th·ªã t·∫•t c·∫£ nhi·ªám v·ª• cho ng∆∞·ªùi d√πng ch·ªçn
	fmt.Println("Danh s√°ch c√°c nhi·ªám v·ª• c√≥ s·∫µn:")
	jobTypes := []string{"like", "likegiare", "likesieure", "reaction", "comment", "share", "follow", "group", "page"}
	var availableJobs []string

	for _, jobType := range jobTypes {
		if jobList, found := jobs[jobType]; found && len(jobList) > 0 {
			availableJobs = append(availableJobs, jobType)
			fmt.Printf("- %s\n", jobType)
		}
	}

	if len(availableJobs) == 0 {
		fmt.Println("Kh√¥ng c√≥ nhi·ªám v·ª• n√†o c√≥ s·∫µn ƒë·ªÉ ch·∫°y.")
		return
	}

	// Cho ng∆∞·ªùi d√πng ch·ªçn nhi·ªám v·ª• c·∫ßn th·ª±c hi·ªán
	fmt.Print("\nCh·ªçn nhi·ªám v·ª• c·∫ßn ch·∫°y (c√°ch nhau b·∫±ng d·∫•u ph·∫©y): ")
	var userInput string
	fmt.Scanln(&userInput)

	// T√°ch c√°c nhi·ªám v·ª• ng∆∞·ªùi d√πng mu·ªën ch·ªçn
	selectedJobs := strings.Split(userInput, ",")
	for i, job := range selectedJobs {
		selectedJobs[i] = strings.TrimSpace(job) // Lo·∫°i b·ªè c√°c k√Ω t·ª± th·ª´a (space)
	}

	// Ch·∫°y c√°c nhi·ªám v·ª• ƒë√£ ch·ªçn
	for _, jobType := range selectedJobs {
		if contains(availableJobs, jobType) {
			fmt.Printf("\nƒêang th·ª±c hi·ªán nhi·ªám v·ª•: %s\n", jobType)
			runJobForAllCookies(jobType, cookies, tds)
		} else {
			fmt.Printf("Nhi·ªám v·ª• '%s' kh√¥ng c√≥ s·∫µn.\n", jobType)
		}
	}
}

// H√†m ki·ªÉm tra nhi·ªám v·ª• c√≥ trong danh s√°ch nhi·ªám v·ª• c√≥ s·∫µn kh√¥ng
func contains(slice []string, item string) bool {
	for _, v := range slice {
		if v == item {
			return true
		}
	}
	return false
}

// H√†m ch·∫°y c√°c nhi·ªám v·ª• cho t·∫•t c·∫£ t√†i kho·∫£n Facebook
func runJobForAllCookies(jobType string, cookies []models.CookieUser, tds *traodoisub.TDSClient) {
	for _, user := range cookies {
		// L·∫•y d·ªØ li·ªáu Facebook cho user
		fb := facebook.NewFacebookClient(user.Cookie)
		utils.Info("üß© B·∫Øt ƒë·∫ßu v·ªõi: " + user.Name)

		// L·∫•y t·∫•t c·∫£ nhi·ªám v·ª• c·ªßa lo·∫°i jobType
		jobs, err := tds.GetJob(jobType)
		if err != nil {
			utils.Warning(fmt.Sprintf("Kh√¥ng c√≥ job cho %s: %s", user.Name, jobType))
			continue // Ti·∫øp t·ª•c t√¨m nhi·ªám v·ª• kh√°c
		}

		// Ch·∫°y c√°c nhi·ªám v·ª• cho t√†i kho·∫£n
		for _, j := range jobs {
			if err := fb.Like(j.ID); err == nil {
				msg, xu, _ := tds.ConfirmJob(jobType, j.ID)
				utils.Success(fmt.Sprintf("%s LIKE %s | %s | %d xu", user.Name, j.ID, msg, xu))
			} else {
				utils.Warning(fmt.Sprintf("%s l·ªói LIKE: %s", user.Name, j.ID))
			}
		}
	}
}

// H√†m ƒë·ªçc cookies t·ª´ file
func loadCookies(path string) []models.CookieUser {
	file, err := os.ReadFile(path)
	if err != nil {
		utils.Error("Kh√¥ng th·ªÉ ƒë·ªçc cookie file: " + err.Error())
		os.Exit(1)
	}
	var cookies []models.CookieUser
	err = json.Unmarshal(file, &cookies)
	if err != nil {
		utils.Error("Cookie file kh√¥ng h·ª£p l·ªá: " + err.Error())
		os.Exit(1)
	}
	return cookies
}

